sensors:
  joint_pos:
    type: boxf32
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]
#  gripper_sensor:
#    type: boxf32
#    high: [0.037, -0.015]
#    low: [0.015, -0.037]

actuators:
  joints:
    type: boxf32
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]
  gripper:
    type: boxf32
    high: [0.057, -0.021]
    low: [0.021, -0.057]

states:
  joint_pos:
    type: boxf32
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]
  joint_vel:
    type: boxf32
    high: [1, 1, 1, 1, 1, 1]
    low: [-1, -1, -1, -1, -1, -1]

gazebo:
  sensors:
    joint_pos:
      topic: vx300s/joint_states
      msg_name: JointState
      type: position
      entries: [6, 5, 0, 1, 7, 8]

  actuators:
    joints:
      server_name: vx300s/arm_controller/follow_joint_trajectory
      action_server: FollowJointTrajectoryActionServer
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]
    # TODO: Jelle implementeren ?
#    gripper:
#      server_name:
#      action_server:
#      names: left_finger, right_finger]

  states: # IMPORTANT! Only add states you are able to both read and reset in the physics engine
    joint_pos:
      type: joint_pos
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]
      topic: vx300s/joint_states
      entries: [6, 5, 0, 1, 7, 8]
    joint_vel:
      type: joint_vel
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]
      topic: vx300s/joint_states
      entries: [6, 5, 0, 1, 7, 8]

pybullet:
#  xacro: $(find eager_robot_vx300s)/urdf/robot.urdf.xacro
  xacro: $(find interbotix_xsarm_descriptions)/urdf/vx300s.urdf.xacro
  xacro_args:
    show_ar_tag: 'true'
  urdf_name: 'd435'
  sensors:
    joint_pos:
      type: joint_pos # OPTIONS: joint_{pos, vel, force_torque, applied_torque}
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]

  actuators:
    joints:
      type: joint
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]
      control_mode: position_control # position_control, velocity_control, torque_control, pd_control
      vel_target: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
      pos_gain: [0.45, 0.45, 0.65, 0.6, 0.45, 0.4]  # work with dt=0.0165 --> still too fast (unrealistic) behavior
      vel_gain: [1.7, 1.7, 1.5, 1.3, 1.0, 1.0]  # work with dt=0.0165 --> still too fast (unrealistic) behavior
    gripper:
      type: joint
      names: [left_finger, right_finger]
      control_mode: position_control # position_control, velocity_control, torque_control, pd_control
      vel_target: [0.0, 0.0]
      pos_gain: [1.5, 1.5]
      vel_gain: [0.7, 0.7]

  # IMPORTANT! Currently, not possible to mix states consisting of both links & joints,
  # IMPORTANT! Only add states you are able to both read and reset in the physics engine (base_pose, base_vel, joint_pos, joint_vel)
  states:
    joint_pos:
      type: joint_pos # OPTIONS: joint_{pos, vel, force_torque, applied_torque}
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]
    joint_vel:
      type: joint_vel # OPTIONS: joint_{pos, vel, force_torque, applied_torque}
      names: [waist, shoulder, elbow, forearm_roll, wrist_angle, wrist_rotate]