sensors:
  joint_sensors:
    type: box
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]

actuators:
  joints:
    type: box
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]

states:
  joint_pos:
    type: box
    high: [3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159]
    low: [-3.14159, -3.14159, -3.14159, -3.14159, -3.14159, -3.14159]
  joint_vel:
    type: box
    high: [1, 1, 1, 1, 1, 1]
    low: [-1, -1, -1, -1, -1, -1]
#  pos:
#    type: box
#    high: [1, 1, 0]
#    low: [-1, -1, 0]
#  orientation:
#    type: box
#    high: [0, 0, 0, 1]
#    low: [0, 0, 0, 1]
#  vel:
#    type: box
#    high: [1, 1, 1]
#    low: [-1, -1, -1]
#  angular_vel:
#    type: box
#    high: [1, 1, 1]
#    low: [-1, -1, -1]

webots:
  sensors:
    joint_sensors:
    - shoulder_pan_joint_sensor
    - shoulder_lift_joint_sensor
    - elbow_joint_sensor
    - wrist_1_joint_sensor
    - wrist_2_joint_sensor
    - wrist_3_joint_sensor
  
  actuators:
    joints:
    - shoulder_pan_joint
    - shoulder_lift_joint
    - elbow_joint
    - wrist_1_joint
    - wrist_2_joint
    - wrist_3_joint

  states: # IMPORTANT! Only add states you are able to both read and reset in the physics engine
    joint_pos:
      -
    joint_vel:
      -

real:
  sensors:
    joint_sensors:
      topic: joint_states
      msg_name: JointState

  actuators:
    joints:
      server_name: follow_joint_trajectory
      joint_names: 
      - shoulder_pan_joint
      - shoulder_lift_joint
      - elbow_joint
      - wrist_1_joint
      - wrist_2_joint
      - wrist_3_joint

gazebo:
  sensors:
    joint_sensors:
      topic: joint_states
      msg_name: JointState
      
  actuators:
    joints:
      server_name: arm_controller/follow_joint_trajectory
      joint_names: 
      - shoulder_pan_joint
      - shoulder_lift_joint
      - elbow_joint
      - wrist_1_joint
      - wrist_2_joint
      - wrist_3_joint

  states: # IMPORTANT! Only add states you are able to both read and reset in the physics engine
    joint_pos:
      -
    joint_vel:
      -

pybullet:
  urdf: $(find eager_robot_ur5e)/assets/ur5e.urdf  # todo: Generate urdf on the fly with xacro?
  sensors:  # IMPORTANT! Currently, not possible to mix sensor measurements of links & joints
    joint_sensors:
      type: joint_pos # OPTIONS: joint_{pos, vel, force_torque, applied_torque}
      name: [shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint]
#    link_sensors:
#      type: link_pos # OPTIONS: link_{pos, orientation, vel, angular_vel}
#      name: [shoulder_link, upper_arm_link, forearm_link, wrist_1_link, wrist_2_link, wrist_3_link]

  actuators:
    joints:
      type: joint
      name: [shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint]
      control_mode: position_control # position_control, velocity_control, torque_control, pd_control
      vel_target: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]
      pos_gain: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
      vel_gain: [0.11, 0.11, 0.11, 0.11, 0.11, 0.11]

  # IMPORTANT! Currently, not possible to mix states consisting of both links & joints,
  # IMPORTANT! Only add states you are able to both read and reset in the physics engine (base_pose, base_vel, joint_pos, joint_vel)
  states:
    joint_pos:
      type: joint_pos # OPTIONS: joint_{pos, vel, force_torque, applied_torque}, base_{pos, orientation, vel, angular_vel}
      name: [shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint]
    joint_vel:
      type: joint_vel
      name: [shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint]
#    pos: # [x, y, z]
#      type: base_pos
#      name: [base_x, base_y, base_z]
#    orientation: # [qx, qy, qz, qw]
#      type: base_orientation
#      name: [base_qx, base_qy, base_qz, base_qw]
#    vel: # [vx, vy, vz]
#      type: base_vel
#      name: [base_vx, base_vy, base_vz]
#    angular_vel: # [wx, wy, wz]
#      type: base_angular_vel
#      name: [base_wx, base_wy, base_wz]