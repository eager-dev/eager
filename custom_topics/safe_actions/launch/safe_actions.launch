<?xml version="1.0"?>
<launch>
	<arg name="ns" default="ros_env/ur5e1" doc="Namespace of the robot"/>
	<arg name="limited" default="true" doc="Specifies whether the robot has joint limits"/>
	
	<group ns="$(arg ns)">
		
		<arg name="capabilities" default=""/>
		<arg name="disable_capabilities" value="
          move_group/MoveGroupKinematicsService
          move_group/ClearOctomapService
          " />
		
		
	  <!-- Launch moveit for collision checking -->
		<include file="$(find ur5_e_moveit_config)/launch/planning_context.launch">
    	<arg name="limited" value="$(arg limited)" />
  	</include>
  	
	  <!-- move_group settings -->
		<arg name="pipeline" default="move_group" />
		<arg name="allow_trajectory_execution" default="false"/>
		<arg name="fake_execution" default="false"/>
		<arg name="execution_type" default="interpolate"/> <!-- set to 'last point' to skip intermediate trajectory in fake execution -->
		<arg name="max_safe_path_cost" default="1"/>
		<arg name="jiggle_fraction" default="0.05" />
		<arg name="publish_monitored_planning_scene" default="false"/>
  	
  	<!-- Start the actual move_group node/action server -->
		<node name="move_group" launch-prefix="" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="">
		  <!-- Set the display variable, in case OpenGL code is used internally -->
		  <env name="DISPLAY" value="$(optenv DISPLAY :0)" />
			
			<param name="octomap_resolution" value ="0.1"/>
		  <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
		  <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
		  <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
		  <param name="default_planning_pipeline" value="$(arg pipeline)" />
		  <param name="capabilities" value="$(arg capabilities)" />
		  <param name="disable_capabilities" value="$(arg disable_capabilities)" />

		  <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
		  <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
		  <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
		  <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
		  <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
		</node>
			
	  <node name="safe_actions" pkg="safe_actions" type="safe_actions_node.py" output="screen"/>
	</group>
  
</launch>
